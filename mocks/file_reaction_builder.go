// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	reaction "github.com/hostfactor/api/go/blueprint/reaction"
	provideractions "github.com/hostfactor/diazo/pkg/provideractions"
	mock "github.com/stretchr/testify/mock"
)

// FileReactionBuilder is an autogenerated mock type for the FileReactionBuilder type
type FileReactionBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *FileReactionBuilder) Build() *reaction.Reaction {
	ret := _m.Called()

	var r0 *reaction.Reaction
	if rf, ok := ret.Get(0).(func() *reaction.Reaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reaction.Reaction)
		}
	}

	return r0
}

// Then provides a mock function with given fields: builders
func (_m *FileReactionBuilder) Then(builders ...provideractions.FileReactionActionBuilder) provideractions.FileReactionBuilder {
	_va := make([]interface{}, len(builders))
	for _i := range builders {
		_va[_i] = builders[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 provideractions.FileReactionBuilder
	if rf, ok := ret.Get(0).(func(...provideractions.FileReactionActionBuilder) provideractions.FileReactionBuilder); ok {
		r0 = rf(builders...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileReactionBuilder)
		}
	}

	return r0
}

// When provides a mock function with given fields: builders
func (_m *FileReactionBuilder) When(builders ...provideractions.FileReactionConditionBuilder) provideractions.FileReactionBuilder {
	_va := make([]interface{}, len(builders))
	for _i := range builders {
		_va[_i] = builders[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 provideractions.FileReactionBuilder
	if rf, ok := ret.Get(0).(func(...provideractions.FileReactionConditionBuilder) provideractions.FileReactionBuilder); ok {
		r0 = rf(builders...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileReactionBuilder)
		}
	}

	return r0
}

type mockConstructorTestingTNewFileReactionBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileReactionBuilder creates a new instance of FileReactionBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileReactionBuilder(t mockConstructorTestingTNewFileReactionBuilder) *FileReactionBuilder {
	mock := &FileReactionBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
