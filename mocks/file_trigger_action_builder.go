// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	blueprint "github.com/hostfactor/api/go/blueprint"
	actions "github.com/hostfactor/api/go/blueprint/actions"

	mock "github.com/stretchr/testify/mock"

	provideractions "github.com/hostfactor/diazo/pkg/provideractions"
)

// FileTriggerActionBuilder is an autogenerated mock type for the FileTriggerActionBuilder type
type FileTriggerActionBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *FileTriggerActionBuilder) Build() *blueprint.FileTriggerAction {
	ret := _m.Called()

	var r0 *blueprint.FileTriggerAction
	if rf, ok := ret.Get(0).(func() *blueprint.FileTriggerAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blueprint.FileTriggerAction)
		}
	}

	return r0
}

// Upload provides a mock function with given fields: from, filename, folder
func (_m *FileTriggerActionBuilder) Upload(from string, filename string, folder string) provideractions.FileTriggerActionBuilder {
	ret := _m.Called(from, filename, folder)

	var r0 provideractions.FileTriggerActionBuilder
	if rf, ok := ret.Get(0).(func(string, string, string) provideractions.FileTriggerActionBuilder); ok {
		r0 = rf(from, filename, folder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileTriggerActionBuilder)
		}
	}

	return r0
}

// ZipFolder provides a mock function with given fields: to, entries
func (_m *FileTriggerActionBuilder) ZipFolder(to string, entries ...*actions.ZipFileEntry) provideractions.FileTriggerActionBuilder {
	_va := make([]interface{}, len(entries))
	for _i := range entries {
		_va[_i] = entries[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, to)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 provideractions.FileTriggerActionBuilder
	if rf, ok := ret.Get(0).(func(string, ...*actions.ZipFileEntry) provideractions.FileTriggerActionBuilder); ok {
		r0 = rf(to, entries...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileTriggerActionBuilder)
		}
	}

	return r0
}
