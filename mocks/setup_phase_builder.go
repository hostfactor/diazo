// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	blueprint "github.com/hostfactor/api/go/blueprint"
	filesystem "github.com/hostfactor/api/go/blueprint/filesystem"

	mock "github.com/stretchr/testify/mock"

	provideractions "github.com/hostfactor/diazo/pkg/provideractions"
)

// SetupPhaseBuilder is an autogenerated mock type for the SetupPhaseBuilder type
type SetupPhaseBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *SetupPhaseBuilder) Build() *blueprint.SetupPhase {
	ret := _m.Called()

	var r0 *blueprint.SetupPhase
	if rf, ok := ret.Get(0).(func() *blueprint.SetupPhase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blueprint.SetupPhase)
		}
	}

	return r0
}

// DownloadBucketFile provides a mock function with given fields: filename, folder, to
func (_m *SetupPhaseBuilder) DownloadBucketFile(filename string, folder string, to string) provideractions.SetupPhaseBuilder {
	ret := _m.Called(filename, folder, to)

	var r0 provideractions.SetupPhaseBuilder
	if rf, ok := ret.Get(0).(func(string, string, string) provideractions.SetupPhaseBuilder); ok {
		r0 = rf(filename, folder, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.SetupPhaseBuilder)
		}
	}

	return r0
}

// ExtractFiles provides a mock function with given fields: fromDirectory, matches, to
func (_m *SetupPhaseBuilder) ExtractFiles(fromDirectory string, matches *filesystem.FileMatcher, to string) provideractions.SetupPhaseBuilder {
	ret := _m.Called(fromDirectory, matches, to)

	var r0 provideractions.SetupPhaseBuilder
	if rf, ok := ret.Get(0).(func(string, *filesystem.FileMatcher, string) provideractions.SetupPhaseBuilder); ok {
		r0 = rf(fromDirectory, matches, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.SetupPhaseBuilder)
		}
	}

	return r0
}

// Gid provides a mock function with given fields: i
func (_m *SetupPhaseBuilder) Gid(i int) provideractions.SetupPhaseBuilder {
	ret := _m.Called(i)

	var r0 provideractions.SetupPhaseBuilder
	if rf, ok := ret.Get(0).(func(int) provideractions.SetupPhaseBuilder); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.SetupPhaseBuilder)
		}
	}

	return r0
}

// MoveFile provides a mock function with given fields: fromDirectory, matches, dst
func (_m *SetupPhaseBuilder) MoveFile(fromDirectory string, matches *filesystem.FileMatcher, dst string) provideractions.SetupPhaseBuilder {
	ret := _m.Called(fromDirectory, matches, dst)

	var r0 provideractions.SetupPhaseBuilder
	if rf, ok := ret.Get(0).(func(string, *filesystem.FileMatcher, string) provideractions.SetupPhaseBuilder); ok {
		r0 = rf(fromDirectory, matches, dst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.SetupPhaseBuilder)
		}
	}

	return r0
}

// Rename provides a mock function with given fields: srcDir, matches, dstFilename
func (_m *SetupPhaseBuilder) Rename(srcDir string, matches *filesystem.FileMatcher, dstFilename string) provideractions.SetupPhaseBuilder {
	ret := _m.Called(srcDir, matches, dstFilename)

	var r0 provideractions.SetupPhaseBuilder
	if rf, ok := ret.Get(0).(func(string, *filesystem.FileMatcher, string) provideractions.SetupPhaseBuilder); ok {
		r0 = rf(srcDir, matches, dstFilename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.SetupPhaseBuilder)
		}
	}

	return r0
}

// Uid provides a mock function with given fields: i
func (_m *SetupPhaseBuilder) Uid(i int) provideractions.SetupPhaseBuilder {
	ret := _m.Called(i)

	var r0 provideractions.SetupPhaseBuilder
	if rf, ok := ret.Get(0).(func(int) provideractions.SetupPhaseBuilder); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.SetupPhaseBuilder)
		}
	}

	return r0
}

// UnzipFile provides a mock function with given fields: from, to
func (_m *SetupPhaseBuilder) UnzipFile(from string, to string) provideractions.SetupPhaseBuilder {
	ret := _m.Called(from, to)

	var r0 provideractions.SetupPhaseBuilder
	if rf, ok := ret.Get(0).(func(string, string) provideractions.SetupPhaseBuilder); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.SetupPhaseBuilder)
		}
	}

	return r0
}
