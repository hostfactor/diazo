// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	userfiles "github.com/hostfactor/diazo/pkg/userfiles"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateFileWriter provides a mock function with given fields: key
func (_m *Client) CreateFileWriter(key string) io.WriteCloser {
	ret := _m.Called(key)

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func(string) io.WriteCloser); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	return r0
}

// DeleteFile provides a mock function with given fields: key
func (_m *Client) DeleteFile(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchFileReader provides a mock function with given fields: key
func (_m *Client) FetchFileReader(key string) (*userfiles.FileReader, error) {
	ret := _m.Called(key)

	var r0 *userfiles.FileReader
	if rf, ok := ret.Get(0).(func(string) *userfiles.FileReader); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userfiles.FileReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFolder provides a mock function with given fields: key
func (_m *Client) ListFolder(key string) ([]*userfiles.FileHandle, error) {
	ret := _m.Called(key)

	var r0 []*userfiles.FileHandle
	if rf, ok := ret.Get(0).(func(string) []*userfiles.FileHandle); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userfiles.FileHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
