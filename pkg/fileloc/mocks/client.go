// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	filesystem "github.com/hostfactor/api/go/blueprint/filesystem"

	mock "github.com/stretchr/testify/mock"

	userfiles "github.com/hostfactor/diazo/pkg/userfiles"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Download provides a mock function with given fields: b, toPath
func (_m *Client) Download(b *filesystem.FileLocation, toPath string) (userfiles.DownloadedFile, error) {
	ret := _m.Called(b, toPath)

	var r0 userfiles.DownloadedFile
	if rf, ok := ret.Get(0).(func(*filesystem.FileLocation, string) userfiles.DownloadedFile); ok {
		r0 = rf(b, toPath)
	} else {
		r0 = ret.Get(0).(userfiles.DownloadedFile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*filesystem.FileLocation, string) error); ok {
		r1 = rf(b, toPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBucketFile provides a mock function with given fields: f, fromPath, b
func (_m *Client) UploadBucketFile(f fs.FS, fromPath string, b *filesystem.BucketFile) (int64, error) {
	ret := _m.Called(f, fromPath, b)

	var r0 int64
	if rf, ok := ret.Get(0).(func(fs.FS, string, *filesystem.BucketFile) int64); ok {
		r0 = rf(f, fromPath, b)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(fs.FS, string, *filesystem.BucketFile) error); ok {
		r1 = rf(f, fromPath, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
