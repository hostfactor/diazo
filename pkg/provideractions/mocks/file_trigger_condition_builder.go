// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	blueprint "github.com/hostfactor/api/go/blueprint"
	filesystem "github.com/hostfactor/api/go/blueprint/filesystem"

	mock "github.com/stretchr/testify/mock"

	provideractions "github.com/hostfactor/diazo/pkg/provideractions"
)

// FileTriggerConditionBuilder is an autogenerated mock type for the FileTriggerConditionBuilder type
type FileTriggerConditionBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *FileTriggerConditionBuilder) Build() *blueprint.FileTriggerCondition {
	ret := _m.Called()

	var r0 *blueprint.FileTriggerCondition
	if rf, ok := ret.Get(0).(func() *blueprint.FileTriggerCondition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blueprint.FileTriggerCondition)
		}
	}

	return r0
}

// Directories provides a mock function with given fields: d
func (_m *FileTriggerConditionBuilder) Directories(d ...string) provideractions.FileTriggerConditionBuilder {
	_va := make([]interface{}, len(d))
	for _i := range d {
		_va[_i] = d[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 provideractions.FileTriggerConditionBuilder
	if rf, ok := ret.Get(0).(func(...string) provideractions.FileTriggerConditionBuilder); ok {
		r0 = rf(d...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileTriggerConditionBuilder)
		}
	}

	return r0
}

// DoesntMatch provides a mock function with given fields: fm
func (_m *FileTriggerConditionBuilder) DoesntMatch(fm *filesystem.FileMatcher) provideractions.FileTriggerConditionBuilder {
	ret := _m.Called(fm)

	var r0 provideractions.FileTriggerConditionBuilder
	if rf, ok := ret.Get(0).(func(*filesystem.FileMatcher) provideractions.FileTriggerConditionBuilder); ok {
		r0 = rf(fm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileTriggerConditionBuilder)
		}
	}

	return r0
}

// Matches provides a mock function with given fields: fm
func (_m *FileTriggerConditionBuilder) Matches(fm *filesystem.FileMatcher) provideractions.FileTriggerConditionBuilder {
	ret := _m.Called(fm)

	var r0 provideractions.FileTriggerConditionBuilder
	if rf, ok := ret.Get(0).(func(*filesystem.FileMatcher) provideractions.FileTriggerConditionBuilder); ok {
		r0 = rf(fm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileTriggerConditionBuilder)
		}
	}

	return r0
}

// Op provides a mock function with given fields: op
func (_m *FileTriggerConditionBuilder) Op(op ...blueprint.FileChangeOp) provideractions.FileTriggerConditionBuilder {
	_va := make([]interface{}, len(op))
	for _i := range op {
		_va[_i] = op[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 provideractions.FileTriggerConditionBuilder
	if rf, ok := ret.Get(0).(func(...blueprint.FileChangeOp) provideractions.FileTriggerConditionBuilder); ok {
		r0 = rf(op...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.FileTriggerConditionBuilder)
		}
	}

	return r0
}
