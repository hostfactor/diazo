// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	blueprint "github.com/hostfactor/api/go/blueprint"
	mock "github.com/stretchr/testify/mock"

	provideractions "github.com/hostfactor/diazo/pkg/provideractions"
)

// RunPhaseBuilder is an autogenerated mock type for the RunPhaseBuilder type
type RunPhaseBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *RunPhaseBuilder) Build() *blueprint.RunPhase {
	ret := _m.Called()

	var r0 *blueprint.RunPhase
	if rf, ok := ret.Get(0).(func() *blueprint.RunPhase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blueprint.RunPhase)
		}
	}

	return r0
}

// FileReaction provides a mock function with given fields: builder
func (_m *RunPhaseBuilder) FileReaction(builder provideractions.FileReactionBuilder) provideractions.RunPhaseBuilder {
	ret := _m.Called(builder)

	var r0 provideractions.RunPhaseBuilder
	if rf, ok := ret.Get(0).(func(provideractions.FileReactionBuilder) provideractions.RunPhaseBuilder); ok {
		r0 = rf(builder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.RunPhaseBuilder)
		}
	}

	return r0
}

// Gid provides a mock function with given fields: i
func (_m *RunPhaseBuilder) Gid(i int) provideractions.RunPhaseBuilder {
	ret := _m.Called(i)

	var r0 provideractions.RunPhaseBuilder
	if rf, ok := ret.Get(0).(func(int) provideractions.RunPhaseBuilder); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.RunPhaseBuilder)
		}
	}

	return r0
}

// LogReaction provides a mock function with given fields: builder
func (_m *RunPhaseBuilder) LogReaction(builder provideractions.LogReactionBuilder) provideractions.RunPhaseBuilder {
	ret := _m.Called(builder)

	var r0 provideractions.RunPhaseBuilder
	if rf, ok := ret.Get(0).(func(provideractions.LogReactionBuilder) provideractions.RunPhaseBuilder); ok {
		r0 = rf(builder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.RunPhaseBuilder)
		}
	}

	return r0
}

// Uid provides a mock function with given fields: i
func (_m *RunPhaseBuilder) Uid(i int) provideractions.RunPhaseBuilder {
	ret := _m.Called(i)

	var r0 provideractions.RunPhaseBuilder
	if rf, ok := ret.Get(0).(func(int) provideractions.RunPhaseBuilder); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provideractions.RunPhaseBuilder)
		}
	}

	return r0
}

type mockConstructorTestingTNewRunPhaseBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewRunPhaseBuilder creates a new instance of RunPhaseBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRunPhaseBuilder(t mockConstructorTestingTNewRunPhaseBuilder) *RunPhaseBuilder {
	mock := &RunPhaseBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
