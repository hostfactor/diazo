// Code generated by mockery v2.36.0. DO NOT EDIT.

package userfilesmocks

import (
	io "io"

	userfiles "github.com/hostfactor/diazo/pkg/userfiles"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateFileWriter provides a mock function with given fields: key
func (_m *Client) CreateFileWriter(key string) io.WriteCloser {
	ret := _m.Called(key)

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func(string) io.WriteCloser); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	return r0
}

// Client_CreateFileWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFileWriter'
type Client_CreateFileWriter_Call struct {
	*mock.Call
}

// CreateFileWriter is a helper method to define mock.On call
//   - key string
func (_e *Client_Expecter) CreateFileWriter(key interface{}) *Client_CreateFileWriter_Call {
	return &Client_CreateFileWriter_Call{Call: _e.mock.On("CreateFileWriter", key)}
}

func (_c *Client_CreateFileWriter_Call) Run(run func(key string)) *Client_CreateFileWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_CreateFileWriter_Call) Return(_a0 io.WriteCloser) *Client_CreateFileWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_CreateFileWriter_Call) RunAndReturn(run func(string) io.WriteCloser) *Client_CreateFileWriter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: key
func (_m *Client) DeleteFile(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type Client_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - key string
func (_e *Client_Expecter) DeleteFile(key interface{}) *Client_DeleteFile_Call {
	return &Client_DeleteFile_Call{Call: _e.mock.On("DeleteFile", key)}
}

func (_c *Client_DeleteFile_Call) Run(run func(key string)) *Client_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteFile_Call) Return(_a0 error) *Client_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteFile_Call) RunAndReturn(run func(string) error) *Client_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// FetchFileReader provides a mock function with given fields: key
func (_m *Client) FetchFileReader(key string) (*userfiles.FileReader, error) {
	ret := _m.Called(key)

	var r0 *userfiles.FileReader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*userfiles.FileReader, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *userfiles.FileReader); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userfiles.FileReader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_FetchFileReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchFileReader'
type Client_FetchFileReader_Call struct {
	*mock.Call
}

// FetchFileReader is a helper method to define mock.On call
//   - key string
func (_e *Client_Expecter) FetchFileReader(key interface{}) *Client_FetchFileReader_Call {
	return &Client_FetchFileReader_Call{Call: _e.mock.On("FetchFileReader", key)}
}

func (_c *Client_FetchFileReader_Call) Run(run func(key string)) *Client_FetchFileReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_FetchFileReader_Call) Return(_a0 *userfiles.FileReader, _a1 error) *Client_FetchFileReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_FetchFileReader_Call) RunAndReturn(run func(string) (*userfiles.FileReader, error)) *Client_FetchFileReader_Call {
	_c.Call.Return(run)
	return _c
}

// ListFolder provides a mock function with given fields: key
func (_m *Client) ListFolder(key string) ([]*userfiles.FileHandle, error) {
	ret := _m.Called(key)

	var r0 []*userfiles.FileHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*userfiles.FileHandle, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []*userfiles.FileHandle); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userfiles.FileHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFolder'
type Client_ListFolder_Call struct {
	*mock.Call
}

// ListFolder is a helper method to define mock.On call
//   - key string
func (_e *Client_Expecter) ListFolder(key interface{}) *Client_ListFolder_Call {
	return &Client_ListFolder_Call{Call: _e.mock.On("ListFolder", key)}
}

func (_c *Client_ListFolder_Call) Run(run func(key string)) *Client_ListFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_ListFolder_Call) Return(_a0 []*userfiles.FileHandle, _a1 error) *Client_ListFolder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListFolder_Call) RunAndReturn(run func(string) ([]*userfiles.FileHandle, error)) *Client_ListFolder_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
