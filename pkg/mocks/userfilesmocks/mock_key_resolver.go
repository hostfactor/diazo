// Code generated by mockery v2.36.0. DO NOT EDIT.

package userfilesmocks

import mock "github.com/stretchr/testify/mock"

// KeyResolver is an autogenerated mock type for the KeyResolver type
type KeyResolver struct {
	mock.Mock
}

type KeyResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyResolver) EXPECT() *KeyResolver_Expecter {
	return &KeyResolver_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: key
func (_m *KeyResolver) Execute(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeyResolver_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type KeyResolver_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - key string
func (_e *KeyResolver_Expecter) Execute(key interface{}) *KeyResolver_Execute_Call {
	return &KeyResolver_Execute_Call{Call: _e.mock.On("Execute", key)}
}

func (_c *KeyResolver_Execute_Call) Run(run func(key string)) *KeyResolver_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KeyResolver_Execute_Call) Return(_a0 string) *KeyResolver_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyResolver_Execute_Call) RunAndReturn(run func(string) string) *KeyResolver_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyResolver creates a new instance of KeyResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyResolver {
	mock := &KeyResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
