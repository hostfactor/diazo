// Code generated by mockery v2.36.0. DO NOT EDIT.

package userfilesmocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// OnErrorFunc is an autogenerated mock type for the OnErrorFunc type
type OnErrorFunc struct {
	mock.Mock
}

type OnErrorFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *OnErrorFunc) EXPECT() *OnErrorFunc_Expecter {
	return &OnErrorFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: err, req
func (_m *OnErrorFunc) Execute(err error, req *http.Request) {
	_m.Called(err, req)
}

// OnErrorFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type OnErrorFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - err error
//   - req *http.Request
func (_e *OnErrorFunc_Expecter) Execute(err interface{}, req interface{}) *OnErrorFunc_Execute_Call {
	return &OnErrorFunc_Execute_Call{Call: _e.mock.On("Execute", err, req)}
}

func (_c *OnErrorFunc_Execute_Call) Run(run func(err error, req *http.Request)) *OnErrorFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error), args[1].(*http.Request))
	})
	return _c
}

func (_c *OnErrorFunc_Execute_Call) Return() *OnErrorFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *OnErrorFunc_Execute_Call) RunAndReturn(run func(error, *http.Request)) *OnErrorFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewOnErrorFunc creates a new instance of OnErrorFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOnErrorFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *OnErrorFunc {
	mock := &OnErrorFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
